#include "utils/utils.h"

global_var char const* FILE_NAME = "/Volumes/RAM_Disk_10GB/day14";

__attribute((always_inline)) u32* getIters() {
    char* iter1Char = getenv("ITER1");
    char* iter2Char = getenv("ITER2");
    u32* iters = (u32*)malloc(sizeof(u32) * 2);
    // char* iterChar = getenv("ITERS1");
    iters[0] = iter1Char == nullptr ? 1 : std::stoi(iter1Char);
    iters[1] = iter2Char == nullptr ? 1 : std::stoi(iter2Char);
    return iters;
}

u64 part1() {
    u64 soln = 0;
    return soln;
}

u64 part2() {
    u64 soln = 0;
    return soln;
}

void solve(u32 iters[2]) {
    u64 s1 = 0, s2;

    // PART 1 START

    {
        Timer t("Part 1", iters[0]);
        for (u32 i = 0; i < iters[0]; i++) {
            s1 = part1();
        }
    }

    // PART 1 END

    // PART 2 START

    {
        Timer t("Part 2", iters[1]);
        for (u32 i = 0; i < iters[1]; i++) {
            s2 = part2();
        }
    }

    // PART 2 END
    std::cout << "\nSolutions\n";
    std::cout << "\tPart 1 - " << s1 << '\n';
    std::cout << "\tPart 2 - " << s2 << '\n';
}

int main() {
    std::string line;
    std::ifstream inputFile(FILE_NAME);
    {
        Timer t("File Reading");
        if (!inputFile.is_open()) {
            std::cerr << "Unable to open file" << '\n';
            return EXIT_FAILURE;
        }

        while (std::getline(inputFile, line)) { }
        inputFile.close();
    }

    auto iters = getIters();
    solve(iters);

    return EXIT_SUCCESS;
}
